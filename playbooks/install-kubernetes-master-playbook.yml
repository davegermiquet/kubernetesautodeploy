---
- hosts: '{{ target }}'
  gather_facts: "no"
  become: true

  tasks:
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - curl
          - python3-setuptools
          - python3-pip

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        validate_certs: no

    - name: Add kubernetes GPG apt Key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
        validate_certs: no

    - name: Add specified repository into sources list
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Add specified repository into sources list
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Update apt and install docker-ce
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - kubelet
          - kubeadm
          - kubectl

    -  name: Install Docker Module for Python
       pip:
         name: docker

    - name: Install AWS CLI
      pip:
        name: awscli


    - name: Configure containerd
      command: sudo containerd config default > /etc/containerd/config.toml

    - name: Setup kubernetes hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ kuburnetes_master }}$'
        line: "{{ kuburnetes_master }} node-master"

    - name: Ansible replace string example
      replace:
        destfile: /lib/systemd/system/docker.service
        regexp: ^ExecStart.*
        replace: 'ExecStart=/usr/bin/dockerd --exec-opt native.cgroupdriver=systemd -H fd:// --containerd=/run/containerd/containerd.sock'


    - name: Just force systemd to reread configs (2.4 and above)
      systemd:
        daemon_reload: yes

    - name: Restart docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: Restart containerd
      systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    - name: Creating a file with content
      copy:
        dest: "/etc/systemd/system/rc-local.service"
        content: |
          [Service]
          Type=forking
          ExecStart=/etc/rc.local
          TimeoutSec=0
          StandardOutput=tty
          RemainAfterExit=yes
          SysVStartPriority=99
          [Install]
          WantedBy=multi-user.target

    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubeadm init --apiserver-advertise-address='{{ kuburnetes_master }}'  --node-name node-master --pod-network-cidr=192.168.0.0/16  --control-plane-endpoint="node-master:6443"     --ignore-preflight-errors=NumCPU | tail -n 2 | tee /home/ubuntu/run_to_connect_node.sh"
        creates: /etc/rc.local

    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl create -f https://docs.projectcalico.org/manifests/crds.yaml"
        creates: /etc/rc.local

    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml"
        creates: /etc/rc.local
    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl taint nodes --all node-role.kubernetes.io/master-"
        creates: /etc/rc.local

    - name: etc/rc.local
      copy:
        dest: "/etc/rc.local"
        content: |
          #!/bin/sh -e
          KUBECONFIG=/etc/kubernetes/admin.conf kubectl proxy --port=8080 &
          exit 0
        mode: 0755

    - name: Enable service rc-local and ensure it is not masked
      systemd:
        name: rc-local
        enabled: yes
        masked: no

    - name: Make sure a service is running
      systemd:
        state: started
        name: rc-local

    - name: copy kubernetes admin
      synchronize:
        mode: pull
        src: "/etc/kubernetes/"
        dest: "{{ workspace }}/etc/kubernetes/"
        recursive: yes

    - name: Creates directory
      file:
        path: /opt/kops/bin/
        state: directory

    - name: Create POOLS for Calico
      copy:
        dest: "/tmp/configurepool.yaml"
        content: |
          apiVersion: projectcalico.org/v3
          kind: IPPool
          metadata:
            name: pool1
          spec:
            cidr: 192.168.0.0/16
            ipipMode: Never
            natOutgoing: true
            disabled: false
            nodeSelector: all()

    - name: Creates directory
      file:
        path: /opt/cni/bin/
        state: directory

    - name: Initialize the Kubernetes cluster using kubeadm
      get_url:
        url:  https://github.com/projectcalico/calicoctl/releases/download/v3.17.1/calicoctl
        dest: /opt/cni/bin/calicoctl
        mode: '0775'

    - name: Download Kops - For Optional Use
      get_url:
        url: https://github.com/kubernetes/kops/releases/download/v1.19.0-beta.3/kops-linux-amd64
        dest: /opt/kops/bin/kops-linux-amd64
        mode: '0775'
