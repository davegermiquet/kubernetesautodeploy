---
- hosts: '{{ target }}'
  gather_facts: "no"
  become: true

  tasks:
    - name: Install required system packages
      yum:
        name:
          - docker 
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
          - deltarpm
        update_cache: yes

        state: removed
    - name: Install required system packages
      yum:
        name:
          - yum-utils
          - python3
          - openssl
          - python3-pip
        update_cache: yes

        state: installed

    - name: Verify the key, using a fingerprint, before import
      rpm_key:
          key: https://www.centos.org/keys/RPM-GPG-KEY-CentOS-7
          fingerprint: 6341 AB27 53D7 8A78 A7C2 7BB1 24C6 A8A7 F4A8 0EB5

    - name: Verify the key, using a fingerprint, before import
      rpm_key:
          key: https://download.docker.com/linux/centos/gpg
          fingerprint: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35

    - name: Verify the key, using a fingerprint, before import
      rpm_key:
          key: https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


    - name: Add repository
      yum_repository:
        name: docker-repo
        description: EPEL YUM repo
        baseurl:  https://download.docker.com/linux/centos/7/x86_64/stable/

    - name: Add repository
      yum_repository:
        name: kubernetes
        description: kuberenetes
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64


    - name: Add repository
      yum_repository:
        name: selinux
        description: selinux
        baseurl: http://mirror.centos.org/centos/7/extras/x86_64/


    - name: Install required system packages
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes
        state: installed

    -  name: Install Docker Module for Python
       pip:
         name: docker
         executable: pip-3

    - name: Install AWS CLI
      pip:
        name: awscli
        executable: pip-3


    - name: Configure containerd
      command: sudo containerd config default > /etc/containerd/config.toml

    - name: Setup kubernetes hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ kuburnetes_master }}$'
        line: "{{ kuburnetes_master }} node-master"

    - name: Ansible replace string example
      replace:
        destfile: /lib/systemd/system/docker.service
        regexp: ^ExecStart.*
        replace: 'ExecStart=/usr/bin/dockerd --exec-opt native.cgroupdriver=systemd -H fd:// --containerd=/run/containerd/containerd.sock'


    - name: Just force systemd to reread configs (2.4 and above)
      systemd:
        daemon_reload: yes

    - name: Restart docker
      systemd:
        name: docker
        enabled: yes
        masked: no

    - name: Restart docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: Restart containerd
      systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    - name: Creating a file with content
      copy:
        dest: "/etc/systemd/system/rc-local.service"
        content: |
          [Service]
          Type=forking
          ExecStart=/etc/rc.local
          TimeoutSec=0
          StandardOutput=tty
          RemainAfterExit=yes
          SysVStartPriority=99
          [Install]
          WantedBy=multi-user.target

    - name: Enable service kubelet and ensure it is not masked
      systemd:
        name: kubelet
        enabled: yes
        masked: no

    - name: Make sure a service is running
      systemd:
        name: kubelet
        state: restarted
    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubeadm init --apiserver-advertise-address='{{ kuburnetes_master }}'  --node-name node-master --pod-network-cidr=192.168.0.0/16  --control-plane-endpoint="node-master:6443"     --ignore-preflight-errors=NumCPU | tail -n 2 | tee /home/ec2-user/run_to_connect_node.sh"
        creates: /tmp/kinstalled

    - name: Importing Schema for Calico
      command:
        cmd: sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl create -f https://docs.projectcalico.org/manifests/crds.yaml"
        creates: /tmp/kinstalled

    - name: Enabling the scheduling of Master for Kubernetes
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl taint nodes --all node-role.kubernetes.io/master-"
        creates: /tmp/kinstalled

    - name: etc/rc.local
      copy:
        dest: "/tmp/kinstalled"
        content: ""
        mode: 0755

    - name: etc/rc.local
      copy:
        dest: "/etc/rc.local"
        content: |
          #!/bin/sh -e
          KUBECONFIG=/etc/kubernetes/admin.conf kubectl proxy --port=8080 &
          exit 0
        mode: 0755

    - name: Enable service rc-local and ensure it is not masked
      systemd:
        name: rc-local
        enabled: yes
        masked: no

    - name: Make sure a service is running
      systemd:
        state: started
        name: rc-local

    - name: Creates directory
      file:
        path: /opt/kops/bin/
        state: directory

    - name: Create POOLS for Calico
      copy:
        dest: "/tmp/configurepool.yaml"
        content: |
          apiVersion: projectcalico.org/v3
          kind: IPPool
          metadata:
            name: pool1
          spec:
            cidr: 192.168.0.0/16
            ipipMode: Always
            natOutgoing: true
            nodeSelector: all()

    - name: Creates directory
      file:
        path: /opt/cni/bin/
        state: directory

    - name: Download Calico CTL  binary File
      get_url:
        url:  https://github.com/projectcalico/calicoctl/releases/download/v3.17.1/calicoctl
        dest: /opt/cni/bin/calicoctl
        mode: '0775'

    - name: configure the pool for calico
      command:
        cmd:  sudo sh -c "KUBECONFIG=/etc/kubernetes/admin.conf DATASTORE_TYPE=kubernetes /opt/cni/bin/calicoctl create -f /tmp/configurepool.yaml"
        creates: /tmp/poolsetup

    - name: create calico-cni account
      command:
        cmd: kubectl create serviceaccount -n kube-system calico-cni
        creates: /tmp/poolsetup

    - name: create passing file
      copy:
        content: ""
        dest: /tmp/poolsetup
        force: no
        group: root
        owner: root
        mode: 0555

    - name: Download Kops - For Optional Use
      get_url:
        url: https://github.com/kubernetes/kops/releases/download/v1.19.0-beta.3/kops-linux-amd64
        dest: /opt/kops/bin/kops-linux-amd64
        mode: '0775'
