---
- hosts: '{{ target }}'
  gather_facts: "no"
  become: true

  tasks:
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - curl
          - python3-setuptools
          - python3-pip
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        validate_certs: no
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'


    - name: Add kubernetes GPG apt Key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
        validate_certs: no
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'

    - name: Add specified repository into sources list
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'

    - name: Add specified repository into sources list
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'

    - name: Update apt and install docker-ce
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes

    -  name: Install Docker Module for Python
       pip:
         name: docker
       environment:
         http_proxy: '{{ http_ansible_proxy }}'
         https_proxy: '{{ http_ansible_proxy }}'

    - name: Install AWS CLI
      pip:
        name: awscli
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'

    - name: Configure containerd
      command: sudo containerd config default > /etc/containerd/config.toml

    - name: Setup kubernetes hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ kuburnetes_master }}$'
        line: "{{ kuburnetes_master }} node-master"

    - name: Ansible replace string example
      replace:
        destfile: /lib/systemd/system/docker.service
        regexp: ^ExecStart.*
        replace: 'ExecStart=/usr/bin/dockerd --exec-opt native.cgroupdriver=systemd -H fd:// --containerd=/run/containerd/containerd.sock'


    - name: Creating a file with content
      copy:
        dest: "/etc/systemd/system/rc-local.service"
        content: |
          [Unit]
          Description=/etc/rc.local Compatibility
          ConditionPathExists=/etc/rc.local
          [Service]
          Type=forking
          ExecStart=/etc/rc.local start
          TimeoutSec=0
          StandardOutput=tty
          RemainAfterExit=yes
          SysVStartPriority=99
          [Install]
          WantedBy=multi-user.target

    - name: Just force systemd to reread configs (2.4 and above)
      systemd:
        daemon_reload: yes

    - name: Restart docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: Restart containerd
      systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    - name: change permissions for run_to_connect
      file:
        path: /home/ubuntu/run_to_connect_node.sh
        state: touch
        mode: "u+rwx,g+rx,o+rx"

    - name: Specifying a path directly
      synchronize:
        mode: pull
        src: rsync://'{{ kuburnetes_master }}'/etc/kubernetes/
        dest: /etc/kubernetes/

    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd:  /home/ubuntu/run_to_connect_node.sh
      creates: /etc/rc.local

    - name: Creating a file with content
      copy:
      dest: "/etc/rc.local"
      content: |
        #!/bin/sh -e
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl proxy --port=8080 &
        exit 0
      mode: 0755

    - name: Enable service rc-local and ensure it is not masked
      systemd:
        name: rc-local
        enabled: yes
        masked: no

    - name: Make sure a service is running
      systemd:
        state: started
        name: rc-local
