---
- hosts: '{{ target }}'
  gather_facts: "no"
  become: true
  tasks:

    - name: Creates cni folder
      file:
        path:  /etc/cni/net.d/
        state: directory

    - name: Creates cni folder
      file:
        path: /opt/cni/bin/
        state: directory

    - name: Configure calico
      command:
        cmd:  sudo sh -c "kubectl config set-credentials calico-cni --client-certificate=/etc/kubernetes/pki/cni.crt --client-key=/etc/kubernetes/pki/cni.key --embed-certs=true --kubeconfig=/tmp/cni.kubeconfig"
        creates: /tmp/cniinstalled

    - name: Configure calico
      command:
        cmd:  sudo sh -c "kubectl config set-context default --cluster=kubernetes --user=calico-cni --kubeconfig=/tmp/cni.kubeconfig"
        creates: /tmp/cniinstalled

    - name: Configure calico
      command:
        cmd:  sudo sh -c "kubectl config use-context default --kubeconfig=/tmp/cni.kubeconfig"
        creates: /tmp/cniinstalled

    - name: create role for calinco
      copy:
        content: |
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: calico-cni
          rules:
          # The CNI plugin needs to get pods, nodes, and namespaces.
            - apiGroups: [""]
              resources:
                - pods
                - nodes
                - namespaces
              verbs:
                - get
          # The CNI plugin patches pods/status.
            - apiGroups: [""]
              resources:
                - pods/status
              verbs:
                - patch
          # These permissions are required for Calico CNI to perform IPAM allocations.
            - apiGroups: ["crd.projectcalico.org"]
              resources:
                - blockaffinities
                - ipamblocks
                - ipamhandles
              verbs:
                - get
                - list
                - create
                - update
                - delete
                - apiGroups: ["crd.projectcalico.org"]
              resources:
                - ipamconfigs
                - clusterinformations
                - ippools
              verbs:
                - get
                - list
        dest: /tmp/calicorole
        force: no
        group: root
        owner: root
        mode: 0555


    - name: Initialize the Kubernetes cluster using kubeadm
      command:
        cmd: kubectl apply -f /tmp/calicorole

    - name: Download calico application
      get_url:
        url: https://github.com/projectcalico/cni-plugin/releases/download/v3.14.0/calico-amd64
        dest: /opt/cni/bin/calico
        mode: '0775'
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'


    - name: Download calico Ipam 
      get_url:
        url: https://github.com/projectcalico/cni-plugin/releases/download/v3.14.0/calico-ipam-amd64
        dest: /opt/cni/bin/calico-ipam
        mode: '0775'
      environment:
        http_proxy: '{{ http_ansible_proxy }}'
        https_proxy: '{{ http_ansible_proxy }}'


    - name: copy over config file over to the proper /etc/ folder
      command:
        cmd:  cp /tmp/cni.kubeconfig /etc/cni/net.d/calico-kubeconfig
        creates: /tmp/cniinstalled

    - name: Creating a file with content for kpod service
      copy:
        dest: "/etc/cni/net.d/10-calico.conflist"
        content: |
          {
            "name": "k8s-pod-network",
            "cniVersion": "0.3.1",
            "plugins": [
            {
                "type": "calico",
                "log_level": "info",
                "datastore_type": "kubernetes",
                "mtu": 1500,
                "ipam": {
                    "type": "calico-ipam"
                },
                 "policy": {
                        "type": "k8s"
                  },
                "kubernetes": {
                    "kubeconfig": "/etc/cni/net.d/calico-kubeconfig"
                        }
                    },
                {
             "type": "portmap",
            "snat": true,
                "capabilities": {"portMappings": true}
            }
            ]
          }

    - name: create passing file
      copy:
        content: ""
        dest: /tmp/cniinstalled
        force: no
        group: root
        owner: root
        mode: 0555




